{
    "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "priceFeedAddress",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "FundMe__NotOwner",
            "type": "error"
        },
        {
            "stateMutability": "payable",
            "type": "fallback"
        },
        {
            "inputs": [],
            "name": "MINIMUM_USD",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fund",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "funder",
                    "type": "address"
                }
            ],
            "name": "getAddressToAmountFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "name": "getFunders",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPriceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "stateMutability": "payable",
            "type": "receive"
        }
    ],
    "transactionHash": "0xfdaea3e0ae6da6fea8441d6b07de6a7d4a9c667bb06b668daa65e845d57f8838",
    "receipt": {
        "to": null,
        "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
        "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "transactionIndex": 0,
        "gasUsed": "892066",
        "logsBloom": "0x
        "blockHash": "0x958508c00837a90df4433e749c81a71f985189ffc7af7d8f57964a904d6b7c3d",
        "transactionHash": "0xfdaea3e0ae6da6fea8441d6b07de6a7d4a9c667bb06b668daa65e845d57f8838",
        "logs": [],
        "blockNumber": 2,
        "cumulativeGasUsed": "892066",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
    "numDeployments": 1,
    "solcInputHash": "ec2af4057b1543552aa6a60a3c82bf60",
    "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Astronaut828\",\"details\":\"This implements price feeds as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Pragma\\npragma solidity ^0.8.8;\\n// Imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n// Error Codes\\nerror FundMe__NotOwner();\\n\\n// Interfaces, Libraries\\n\\n// Contracts / NatSpec\\n/** @title A contract for crowd funding\\n *  @author Astronaut828\\n *  @notice This contract is to demo a sample funding contract\\n *  @dev This implements price feeds as our library\\n */\\ncontract FundMe {\\n    // Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // State Variables\\n    mapping(address => uint256) private addressToAmountFunded;\\n    address[] private funders;\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n    AggregatorV3Interface private priceFeed;\\n\\n    // Modifiers\\n    modifier onlyOwner() {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    // Functions Order:\\n    //// constructor\\n    //// receive\\n    //// fallback\\n    //// externals\\n    //// public\\n    //// internal\\n    //// private\\n    //// view / pure\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\\\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback()\\n    //     /   \\\\\\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    /**\\n     *  @notice This function funds this contract\\n     *  @dev This implements price feeds as our library\\n     */\\n    function fund() public payable {\\n        require(\\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        addressToAmountFunded[msg.sender] += msg.value;\\n        funders.push(msg.sender);\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            addressToAmountFunded[funder] = 0;\\n        }\\n        funders = new address[](0);\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    // view / pure \\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunders(uint256 index) public view returns (address) {\\n        return funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(\\n        address funder\\n    ) public view returns (uint256) {\\n        return addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0xfc0dd64b4c66a52092871b89995b36f72b851477056226c2b1399ad673a8ca3c\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0xfd2cfd63e8ffd5b71bedf9021381e58fc19065c3d5ded28242d615fbadd6372f\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60a060405234801561001057600080fd5b50604051620010283803806200102883398181016040528101906100349190610115565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610142565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100e2826100b7565b9050919050565b6100f2816100d7565b81146100fd57600080fd5b50565b60008151905061010f816100e9565b92915050565b60006020828403121561012b5761012a6100b2565b5b600061013984828501610100565b91505092915050565b60805160601c610ec0620001686000396000818161037501526105c40152610ec06000f3fe6080604052600436106100745760003560e01c80636b69a5921161004e5780636b69a5921461011e578063893d20e8146101495780639e87a5cd14610174578063b60d42881461019f57610083565b80630343fb251461008d5780633a7b6c74146100ca5780633ccfd60b1461010757610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100b460048036038101906100af91906107f8565b6102e3565b6040516100c1919061083e565b60405180910390f35b3480156100d657600080fd5b506100f160048036038101906100ec9190610885565b61032b565b6040516100fe91906108c1565b60405180910390f35b34801561011357600080fd5b5061011c610373565b005b34801561012a57600080fd5b506101336105b3565b604051610140919061083e565b60405180910390f35b34801561015557600080fd5b5061015e6105c0565b60405161016b91906108c1565b60405180910390f35b34801561018057600080fd5b506101896105e8565b604051610196919061093b565b60405180910390f35b6101a76101a9565b005b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461061290919063ffffffff16565b1015610229576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610220906109b3565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102779190610a02565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006001828154811061034157610340610a58565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103f8576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104a35760006001828154811061041e5761041d610a58565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061049b90610a87565b9150506103fb565b50600067ffffffffffffffff8111156104bf576104be610ad0565b5b6040519080825280602002602001820160405280156104ed5781602001602082028036833780820191505090505b50600190805190602001906105039291906106ee565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161052a90610b30565b60006040518083038185875af1925050503d8060008114610567576040519150601f19603f3d011682016040523d82523d6000602084013e61056c565b606091505b50509050806105b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a790610b91565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008061061e8361064e565b90506000670de0b6b3a764000085836106379190610bb1565b6106419190610c3a565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561069757600080fd5b505afa1580156106ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cf9190610cf8565b5050509150506402540be400816106e69190610d73565b915050919050565b828054828255906000526020600020908101928215610767579160200282015b828111156107665782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061070e565b5b5090506107749190610778565b5090565b5b80821115610791576000816000905550600101610779565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107c58261079a565b9050919050565b6107d5816107ba565b81146107e057600080fd5b50565b6000813590506107f2816107cc565b92915050565b60006020828403121561080e5761080d610795565b5b600061081c848285016107e3565b91505092915050565b6000819050919050565b61083881610825565b82525050565b6000602082019050610853600083018461082f565b92915050565b61086281610825565b811461086d57600080fd5b50565b60008135905061087f81610859565b92915050565b60006020828403121561089b5761089a610795565b5b60006108a984828501610870565b91505092915050565b6108bb816107ba565b82525050565b60006020820190506108d660008301846108b2565b92915050565b6000819050919050565b60006109016108fc6108f78461079a565b6108dc565b61079a565b9050919050565b6000610913826108e6565b9050919050565b600061092582610908565b9050919050565b6109358161091a565b82525050565b6000602082019050610950600083018461092c565b92915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b600061099d601b83610956565b91506109a882610967565b602082019050919050565b600060208201905081810360008301526109cc81610990565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a0d82610825565b9150610a1883610825565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a4d57610a4c6109d3565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610a9282610825565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ac557610ac46109d3565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610b1a600083610aff565b9150610b2582610b0a565b600082019050919050565b6000610b3b82610b0d565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610b7b600b83610956565b9150610b8682610b45565b602082019050919050565b60006020820190508181036000830152610baa81610b6e565b9050919050565b6000610bbc82610825565b9150610bc783610825565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610c0057610bff6109d3565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c4582610825565b9150610c5083610825565b925082610c6057610c5f610c0b565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c8a81610c6b565b8114610c9557600080fd5b50565b600081519050610ca781610c81565b92915050565b6000819050919050565b610cc081610cad565b8114610ccb57600080fd5b50565b600081519050610cdd81610cb7565b92915050565b600081519050610cf281610859565b92915050565b600080600080600060a08688031215610d1457610d13610795565b5b6000610d2288828901610c98565b9550506020610d3388828901610cce565b9450506040610d4488828901610ce3565b9350506060610d5588828901610ce3565b9250506080610d6688828901610c98565b9150509295509295909350565b6000610d7e82610cad565b9150610d8983610cad565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610dc857610dc76109d3565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610e0557610e046109d3565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e4257610e416109d3565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e7f57610e7e6109d3565b5b82820290509291505056fea2646970667358221220ccc1aff749f909ef99f1b13ec90c33b2900a99a8448471c93570e1638951e0ff64736f6c63430008080033",
    "deployedBytecode": "0x6080604052600436106100745760003560e01c80636b69a5921161004e5780636b69a5921461011e578063893d20e8146101495780639e87a5cd14610174578063b60d42881461019f57610083565b80630343fb251461008d5780633a7b6c74146100ca5780633ccfd60b1461010757610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100b460048036038101906100af91906107f8565b6102e3565b6040516100c1919061083e565b60405180910390f35b3480156100d657600080fd5b506100f160048036038101906100ec9190610885565b61032b565b6040516100fe91906108c1565b60405180910390f35b34801561011357600080fd5b5061011c610373565b005b34801561012a57600080fd5b506101336105b3565b604051610140919061083e565b60405180910390f35b34801561015557600080fd5b5061015e6105c0565b60405161016b91906108c1565b60405180910390f35b34801561018057600080fd5b506101896105e8565b604051610196919061093b565b60405180910390f35b6101a76101a9565b005b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461061290919063ffffffff16565b1015610229576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610220906109b3565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102779190610a02565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60006001828154811061034157610340610a58565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103f8576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104a35760006001828154811061041e5761041d610a58565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061049b90610a87565b9150506103fb565b50600067ffffffffffffffff8111156104bf576104be610ad0565b5b6040519080825280602002602001820160405280156104ed5781602001602082028036833780820191505090505b50600190805190602001906105039291906106ee565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161052a90610b30565b60006040518083038185875af1925050503d8060008114610567576040519150601f19603f3d011682016040523d82523d6000602084013e61056c565b606091505b50509050806105b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a790610b91565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008061061e8361064e565b90506000670de0b6b3a764000085836106379190610bb1565b6106419190610c3a565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561069757600080fd5b505afa1580156106ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cf9190610cf8565b5050509150506402540be400816106e69190610d73565b915050919050565b828054828255906000526020600020908101928215610767579160200282015b828111156107665782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055509160200191906001019061070e565b5b5090506107749190610778565b5090565b5b80821115610791576000816000905550600101610779565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107c58261079a565b9050919050565b6107d5816107ba565b81146107e057600080fd5b50565b6000813590506107f2816107cc565b92915050565b60006020828403121561080e5761080d610795565b5b600061081c848285016107e3565b91505092915050565b6000819050919050565b61083881610825565b82525050565b6000602082019050610853600083018461082f565b92915050565b61086281610825565b811461086d57600080fd5b50565b60008135905061087f81610859565b92915050565b60006020828403121561089b5761089a610795565b5b60006108a984828501610870565b91505092915050565b6108bb816107ba565b82525050565b60006020820190506108d660008301846108b2565b92915050565b6000819050919050565b60006109016108fc6108f78461079a565b6108dc565b61079a565b9050919050565b6000610913826108e6565b9050919050565b600061092582610908565b9050919050565b6109358161091a565b82525050565b6000602082019050610950600083018461092c565b92915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b600061099d601b83610956565b91506109a882610967565b602082019050919050565b600060208201905081810360008301526109cc81610990565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610a0d82610825565b9150610a1883610825565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a4d57610a4c6109d3565b5b828201905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610a9282610825565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ac557610ac46109d3565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610b1a600083610aff565b9150610b2582610b0a565b600082019050919050565b6000610b3b82610b0d565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610b7b600b83610956565b9150610b8682610b45565b602082019050919050565b60006020820190508181036000830152610baa81610b6e565b9050919050565b6000610bbc82610825565b9150610bc783610825565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610c0057610bff6109d3565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610c4582610825565b9150610c5083610825565b925082610c6057610c5f610c0b565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610c8a81610c6b565b8114610c9557600080fd5b50565b600081519050610ca781610c81565b92915050565b6000819050919050565b610cc081610cad565b8114610ccb57600080fd5b50565b600081519050610cdd81610cb7565b92915050565b600081519050610cf281610859565b92915050565b600080600080600060a08688031215610d1457610d13610795565b5b6000610d2288828901610c98565b9550506020610d3388828901610cce565b9450506040610d4488828901610ce3565b9350506060610d5588828901610ce3565b9250506080610d6688828901610c98565b9150509295509295909350565b6000610d7e82610cad565b9150610d8983610cad565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610dc857610dc76109d3565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610e0557610e046109d3565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610e4257610e416109d3565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610e7f57610e7e6109d3565b5b82820290509291505056fea2646970667358221220ccc1aff749f909ef99f1b13ec90c33b2900a99a8448471c93570e1638951e0ff64736f6c63430008080033",
    "devdoc": {
        "author": "Astronaut828",
        "details": "This implements price feeds as our library",
        "kind": "dev",
        "methods": {
            "fund()": {
                "details": "This implements price feeds as our library"
            }
        },
        "title": "A contract for crowd funding",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {
            "fund()": {
                "notice": "This function funds this contract"
            }
        },
        "notice": "This contract is to demo a sample funding contract",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 59,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "addressToAmountFunded",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 62,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "funders",
                "offset": 0,
                "slot": "1",
                "type": "t_array(t_address)dyn_storage"
            },
            {
                "astId": 74,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "priceFeed",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(AggregatorV3Interface)45"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_contract(AggregatorV3Interface)45": {
                "encoding": "inplace",
                "label": "contract AggregatorV3Interface",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
